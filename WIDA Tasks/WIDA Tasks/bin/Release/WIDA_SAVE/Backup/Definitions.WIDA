<Definitions><IsDefinitions>1</IsDefinitions><Trigger><Name>Every millisecond</Name><GroupName>Time</GroupName><Description>This will trigger the task every millisecond</Description><Active>0</Active><NeedsParams>0</NeedsParams><Source><Files><File><Name>Default.cs</Name><Code>using System;using System.Collections.Generic;using System.Text;using System.Windows.Forms;//Do not edit namespace or class namenamespace Code{    public class Trigger    {        Timer Timer = new Timer();        object[] Params = null;        //Call "TriggerDel.DynamicInvoke()" to trigger the task        Delegate TriggerDel = null;        public Trigger(Delegate Trigger, object[] Params)        {            this.TriggerDel = Trigger;            //These parameters will come from the form for this Trigger(Optional)            this.Params = Params;            this.Timer.Interval = 1;            this.Timer.Tick += new EventHandler(this.TriggerTask);            this.Timer.Start();        }        public void TriggerTask(object sender, EventArgs e)        {           TriggerDel.DynamicInvoke();        }    }}</Code><Critical>1</Critical></File></Files><ReferencedAssemeblies><ReferencedAssemebly>Microsoft.CSharp.dll</ReferencedAssemebly><ReferencedAssemebly>System.dll</ReferencedAssemebly><ReferencedAssemebly>System.Core.dll</ReferencedAssemebly><ReferencedAssemebly>System.Data.dll</ReferencedAssemebly><ReferencedAssemebly>System.Xml.dll</ReferencedAssemebly><ReferencedAssemebly>System.Windows.Forms.dll</ReferencedAssemebly></ReferencedAssemeblies></Source></Trigger><Trigger><Name>Every second</Name><GroupName>Time</GroupName><Description>This will trigger the task every second</Description><Active>0</Active><NeedsParams>0</NeedsParams><Source><Files><File><Name>Default.cs</Name><Code>using System;using System.Collections.Generic;using System.Text;using System.Windows.Forms;//Do not edit namespace or class namenamespace Code{    public class Trigger    {        Timer Timer = new Timer();        object[] Params = null;        //Call "TriggerDel.DynamicInvoke()" to trigger the task        Delegate TriggerDel = null;        public Trigger(Delegate Trigger, object[] Params)        {            this.TriggerDel = Trigger;            //These parameters will come from the form for this Trigger(Optional)            this.Params = Params;            this.Timer.Interval = 1000;            this.Timer.Tick += new EventHandler(this.TriggerTask);            this.Timer.Start();        }        public void TriggerTask(object sender, EventArgs e)        {           TriggerDel.DynamicInvoke();        }    }}</Code><Critical>1</Critical></File></Files><ReferencedAssemeblies><ReferencedAssemebly>Microsoft.CSharp.dll</ReferencedAssemebly><ReferencedAssemebly>System.dll</ReferencedAssemebly><ReferencedAssemebly>System.Core.dll</ReferencedAssemebly><ReferencedAssemebly>System.Data.dll</ReferencedAssemebly><ReferencedAssemebly>System.Xml.dll</ReferencedAssemebly><ReferencedAssemebly>System.Windows.Forms.dll</ReferencedAssemebly></ReferencedAssemeblies></Source></Trigger><Trigger><Name>Every minute</Name><GroupName>Time</GroupName><Description>This will trigger the task at the start of every minute</Description><Active>0</Active><NeedsParams>0</NeedsParams><Source><Files><File><Name>Default.cs</Name><Code>using System;using System.Collections.Generic;using System.Text;using System.Windows.Forms;//Do not edit namespace or class namenamespace Code{    public class Trigger    {        Timer Timer = new Timer();        object[] Params = null;        //Call "TriggerDel.DynamicInvoke()" to trigger the task        Delegate TriggerDel = null;        public Trigger(Delegate Trigger, object[] Params)        {            this.TriggerDel = Trigger;            //These parameters will come from the form for this Trigger(Optional)            this.Params = Params;            this.Timer.Interval = 1000;            this.Timer.Tick += new EventHandler(this.TriggerTask);            this.Timer.Start();        }        public void TriggerTask(object sender, EventArgs e)        {           if(DateTime.Now.Second == 0)               TriggerDel.DynamicInvoke();        }    }}</Code><Critical>1</Critical></File></Files><ReferencedAssemeblies><ReferencedAssemebly>Microsoft.CSharp.dll</ReferencedAssemebly><ReferencedAssemebly>System.dll</ReferencedAssemebly><ReferencedAssemebly>System.Core.dll</ReferencedAssemebly><ReferencedAssemebly>System.Data.dll</ReferencedAssemebly><ReferencedAssemebly>System.Xml.dll</ReferencedAssemebly><ReferencedAssemebly>System.Windows.Forms.dll</ReferencedAssemebly></ReferencedAssemeblies></Source></Trigger><Trigger><Name>Every hour</Name><GroupName>Time</GroupName><Description>This will trigger the task at the start of every hour</Description><Active>0</Active><NeedsParams>0</NeedsParams><Source><Files><File><Name>Default.cs</Name><Code>using System;using System.Collections.Generic;using System.Text;using System.Windows.Forms;//Do not edit namespace or class namenamespace Code{    public class Trigger    {        Timer Timer = new Timer();        object[] Params = null;        //Call "TriggerDel.DynamicInvoke()" to trigger the task        Delegate TriggerDel = null;        public Trigger(Delegate Trigger, object[] Params)        {            this.TriggerDel = Trigger;            //These parameters will come from the form for this Trigger(Optional)            this.Params = Params;            this.Timer.Interval = 1000;            this.Timer.Tick += new EventHandler(this.TriggerTask);            this.Timer.Start();        }        public void TriggerTask(object sender, EventArgs e)        {           if(DateTime.Now.Second == 0 &amp;&amp; DateTime.Now.Minute == 0)               TriggerDel.DynamicInvoke();        }    }}</Code><Critical>1</Critical></File></Files><ReferencedAssemeblies><ReferencedAssemebly>Microsoft.CSharp.dll</ReferencedAssemebly><ReferencedAssemebly>System.dll</ReferencedAssemebly><ReferencedAssemebly>System.Core.dll</ReferencedAssemebly><ReferencedAssemebly>System.Data.dll</ReferencedAssemebly><ReferencedAssemebly>System.Xml.dll</ReferencedAssemebly><ReferencedAssemebly>System.Windows.Forms.dll</ReferencedAssemebly></ReferencedAssemeblies></Source></Trigger><Trigger><Name>Every day</Name><GroupName>Time</GroupName><Description>This will trigger the task at the start of every day</Description><Active>0</Active><NeedsParams>0</NeedsParams><Source><Files><File><Name>Default.cs</Name><Code>using System;using System.Collections.Generic;using System.Text;using System.Windows.Forms;//Do not edit namespace or class namenamespace Code{    public class Trigger    {        Timer Timer = new Timer();        object[] Params = null;        //Call "TriggerDel.DynamicInvoke()" to trigger the task        Delegate TriggerDel = null;        public Trigger(Delegate Trigger, object[] Params)        {            this.TriggerDel = Trigger;            //These parameters will come from the form for this Trigger(Optional)            this.Params = Params;            this.Timer.Interval = 1000;            this.Timer.Tick += new EventHandler(this.TriggerTask);            this.Timer.Start();        }        public void TriggerTask(object sender, EventArgs e)        {           if(DateTime.Now.Second == 0 &amp;&amp; DateTime.Now.Minute == 0 &amp;&amp; DateTime.Now.Hour == 0)               TriggerDel.DynamicInvoke();        }    }}</Code><Critical>1</Critical></File></Files><ReferencedAssemeblies><ReferencedAssemebly>Microsoft.CSharp.dll</ReferencedAssemebly><ReferencedAssemebly>System.dll</ReferencedAssemebly><ReferencedAssemebly>System.Core.dll</ReferencedAssemebly><ReferencedAssemebly>System.Data.dll</ReferencedAssemebly><ReferencedAssemebly>System.Xml.dll</ReferencedAssemebly><ReferencedAssemebly>System.Windows.Forms.dll</ReferencedAssemebly></ReferencedAssemeblies></Source></Trigger><Trigger><Name>Every week</Name><GroupName>Time</GroupName><Description>This will trigger the task at the start of every week</Description><Active>0</Active><NeedsParams>0</NeedsParams><Source><Files><File><Name>Default.cs</Name><Code>using System;using System.Collections.Generic;using System.Text;using System.Windows.Forms;//Do not edit namespace or class namenamespace Code{    public class Trigger    {        Timer Timer = new Timer();        object[] Params = null;        //Call "TriggerDel.DynamicInvoke()" to trigger the task        Delegate TriggerDel = null;        public Trigger(Delegate Trigger, object[] Params)        {            this.TriggerDel = Trigger;            //These parameters will come from the form for this Trigger(Optional)            this.Params = Params;            this.Timer.Interval = 1000;            this.Timer.Tick += new EventHandler(this.TriggerTask);            this.Timer.Start();        }        public void TriggerTask(object sender, EventArgs e)        {           if(DateTime.Now.Second == 0 &amp;&amp; DateTime.Now.Minute == 0 &amp;&amp; DateTime.Now.Hour == 0 &amp;&amp; DateTime.Now.DayOfWeek == 0)               TriggerDel.DynamicInvoke();        }    }}</Code><Critical>1</Critical></File></Files><ReferencedAssemeblies><ReferencedAssemebly>Microsoft.CSharp.dll</ReferencedAssemebly><ReferencedAssemebly>System.dll</ReferencedAssemebly><ReferencedAssemebly>System.Core.dll</ReferencedAssemebly><ReferencedAssemebly>System.Data.dll</ReferencedAssemebly><ReferencedAssemebly>System.Xml.dll</ReferencedAssemebly><ReferencedAssemebly>System.Windows.Forms.dll</ReferencedAssemebly></ReferencedAssemeblies></Source></Trigger><Trigger><Name>At times</Name><GroupName>Time</GroupName><Description>This will trigger the task when a specified time is reached</Description><Active>0</Active><NeedsParams>1</NeedsParams><FormSource><Files><File><Name>Form.cs</Name><Code>using System;using System.Collections.Generic;using System.ComponentModel;using System.Data;using System.Drawing;using System.Linq;using System.Text;using System.Windows.Forms;namespace Form{    public partial class ParamsForm : System.Windows.Forms.Form    {        List&lt;DateTime&gt; Times = new List&lt;DateTime&gt;();        //This array with be passed to the linked trigger, condition or action        public object[] ReturnedParams;        //This array is from previously entered params (so the user can edit the params)(optional)        private object[] OriginalParams = null;        //This boolean must be set to true for the params to be accepted(to make sure bad params dont get sent)        public bool ParamsValid = false;        private System.Windows.Forms.Label timesLabel;        private System.Windows.Forms.Label dateLabel;        private System.Windows.Forms.DateTimePicker datePicker;        private System.Windows.Forms.Label timeLabel;        private System.Windows.Forms.DateTimePicker timePicker;        private System.Windows.Forms.Button addButton;        private System.Windows.Forms.ListBox timesListBox;        private System.Windows.Forms.Button doneButton;        private System.Windows.Forms.Button removeButton;        private System.Windows.Forms.Button clearButton;        public ParamsForm(object[] OriginalParams = null)        {            this.OriginalParams = OriginalParams;            this.timesLabel = new System.Windows.Forms.Label();            this.dateLabel = new System.Windows.Forms.Label();            this.datePicker = new System.Windows.Forms.DateTimePicker();            this.timeLabel = new System.Windows.Forms.Label();            this.timePicker = new System.Windows.Forms.DateTimePicker();            this.addButton = new System.Windows.Forms.Button();            this.timesListBox = new System.Windows.Forms.ListBox();            this.doneButton = new System.Windows.Forms.Button();            this.removeButton = new System.Windows.Forms.Button();            this.clearButton = new System.Windows.Forms.Button();            this.SuspendLayout();            //             // timesLabel            //             this.timesLabel.AutoSize = true;            this.timesLabel.Location = new System.Drawing.Point(9, 9);            this.timesLabel.Name = "timesLabel";            this.timesLabel.Size = new System.Drawing.Size(38, 13);            this.timesLabel.TabIndex = 0;            this.timesLabel.Text = "Times:";            //             // dateLabel            //             this.dateLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));            this.dateLabel.AutoSize = true;            this.dateLabel.Location = new System.Drawing.Point(9, 208);            this.dateLabel.Name = "dateLabel";            this.dateLabel.Size = new System.Drawing.Size(33, 13);            this.dateLabel.TabIndex = 2;            this.dateLabel.Text = "Date:";            //             // datePicker            //             this.datePicker.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)            | System.Windows.Forms.AnchorStyles.Right)));            this.datePicker.Location = new System.Drawing.Point(48, 204);            this.datePicker.Name = "datePicker";            this.datePicker.Size = new System.Drawing.Size(200, 20);            this.datePicker.TabIndex = 3;            //             // timeLabel            //             this.timeLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));            this.timeLabel.AutoSize = true;            this.timeLabel.Location = new System.Drawing.Point(9, 236);            this.timeLabel.Name = "timeLabel";            this.timeLabel.Size = new System.Drawing.Size(33, 13);            this.timeLabel.TabIndex = 4;            this.timeLabel.Text = "Time:";            //             // timePicker            //             this.timePicker.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)            | System.Windows.Forms.AnchorStyles.Right)));            this.timePicker.Format = System.Windows.Forms.DateTimePickerFormat.Time;            this.timePicker.Location = new System.Drawing.Point(48, 230);            this.timePicker.Name = "timePicker";            this.timePicker.ShowUpDown = true;            this.timePicker.Size = new System.Drawing.Size(200, 20);            this.timePicker.TabIndex = 5;            //             // addButton            //             this.addButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));            this.addButton.Location = new System.Drawing.Point(254, 204);            this.addButton.Name = "addButton";            this.addButton.Size = new System.Drawing.Size(39, 45);            this.addButton.TabIndex = 6;            this.addButton.Text = "Add";            this.addButton.UseVisualStyleBackColor = true;            this.addButton.Click += new System.EventHandler(this.addButton_Click);            //             // timesListBox            //             this.timesListBox.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)            | System.Windows.Forms.AnchorStyles.Left)            | System.Windows.Forms.AnchorStyles.Right)));            this.timesListBox.FormattingEnabled = true;            this.timesListBox.IntegralHeight = false;            this.timesListBox.Location = new System.Drawing.Point(12, 25);            this.timesListBox.Name = "timesListBox";            this.timesListBox.Size = new System.Drawing.Size(281, 173);            this.timesListBox.TabIndex = 1;            //             // doneButton            //             this.doneButton.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)            | System.Windows.Forms.AnchorStyles.Right)));            this.doneButton.Location = new System.Drawing.Point(12, 256);            this.doneButton.Name = "doneButton";            this.doneButton.Size = new System.Drawing.Size(281, 23);            this.doneButton.TabIndex = 7;            this.doneButton.Text = "Done";            this.doneButton.UseVisualStyleBackColor = true;            this.doneButton.Click += new System.EventHandler(this.doneButton_Click);            //             // removeButton            //             this.removeButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));            this.removeButton.Location = new System.Drawing.Point(234, 26);            this.removeButton.Name = "removeButton";            this.removeButton.Size = new System.Drawing.Size(58, 21);            this.removeButton.TabIndex = 8;            this.removeButton.Text = "Remove";            this.removeButton.UseVisualStyleBackColor = true;            this.removeButton.Click += new System.EventHandler(this.removeButton_Click);            //             // clearButton            //             this.clearButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));            this.clearButton.Location = new System.Drawing.Point(193, 26);            this.clearButton.Name = "clearButton";            this.clearButton.Size = new System.Drawing.Size(42, 21);            this.clearButton.TabIndex = 9;            this.clearButton.Text = "Clear";            this.clearButton.UseVisualStyleBackColor = true;            this.clearButton.Click += new System.EventHandler(this.clearButton_Click);            //             // ParamsForm            //             this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;            this.ClientSize = new System.Drawing.Size(305, 291);            this.Controls.Add(this.clearButton);            this.Controls.Add(this.removeButton);            this.Controls.Add(this.doneButton);            this.Controls.Add(this.addButton);            this.Controls.Add(this.timePicker);            this.Controls.Add(this.timeLabel);            this.Controls.Add(this.datePicker);            this.Controls.Add(this.dateLabel);            this.Controls.Add(this.timesListBox);            this.Controls.Add(this.timesLabel);            this.Name = "ParamsForm";            this.Text = "Times Dialog";            this.ResumeLayout(false);            this.PerformLayout();        }        private void ParamsForm_Load(object sender, EventArgs e)        {            datePicker.MinDate = DateTime.Now;            timePicker.MinDate = DateTime.Now;            if(this.OriginalParams != null)                foreach (object TimeObj in this.OriginalParams)                {                    timesListBox.Items.Add(((DateTime)TimeObj).ToString());                    Times.Add((DateTime)TimeObj);                }        }        private void addButton_Click(object sender, EventArgs e)        {            DateTime Time = new DateTime(datePicker.Value.Year, datePicker.Value.Month, datePicker.Value.Day, timePicker.Value.Hour, timePicker.Value.Minute, timePicker.Value.Second);            timesListBox.Items.Add(Time.ToString());            Times.Add(Time);        }        private void removeButton_Click(object sender, EventArgs e)        {            if (timesListBox.SelectedIndex != -1)            {                int Index = timesListBox.SelectedIndex;                timesListBox.Items.RemoveAt(Index);                Times.RemoveAt(Index);            }            else                MessageBox.Show("Please select a time");        }        private void clearButton_Click(object sender, EventArgs e)        {            timesListBox.Items.Clear();            Times.Clear();        }        private void doneButton_Click(object sender, EventArgs e)        {            if (timesListBox.Items.Count == 0)            {                MessageBox.Show("Please add at least time");                return;            }            List&lt;object&gt; TimesObj = new List&lt;object&gt;();            foreach (DateTime Time in Times)            {                TimesObj.Add((object)Time);            }            ReturnedParams = TimesObj.ToArray();            ParamsValid = true;        }    }}</Code><Critical>1</Critical></File></Files><ReferencedAssemeblies><ReferencedAssemebly>Microsoft.CSharp.dll</ReferencedAssemebly><ReferencedAssemebly>System.dll</ReferencedAssemebly><ReferencedAssemebly>System.Core.dll</ReferencedAssemebly><ReferencedAssemebly>System.Data.dll</ReferencedAssemebly><ReferencedAssemebly>System.Xml.dll</ReferencedAssemebly><ReferencedAssemebly>System.Windows.Forms.dll</ReferencedAssemebly><ReferencedAssemebly>System.Drawing.dll</ReferencedAssemebly></ReferencedAssemeblies></FormSource><Source><Files><File><Name>Default.cs</Name><Code>using System;using System.Collections.Generic;using System.Text;using System.Windows.Forms;//Do not edit namespace or class namenamespace Code{    public class Trigger    {        Timer Timer = new Timer();        DateTime SpecifiedTime = new DateTime();        object[] Params = null;        //Call "TriggerDel.DynamicInvoke()" to trigger the task        Delegate TriggerDel = null;        public Trigger(Delegate Trigger, object[] Params)        {            this.TriggerDel = Trigger;            //These parameters will come from the form for this Trigger(Optional)            this.Params = Params;            this.SpecifiedTime = (DateTime)Params[0];            this.Timer.Interval = 1000;            this.Timer.Tick += new EventHandler(this.TriggerTask);            this.Timer.Start();        }        public void TriggerTask(object sender, EventArgs e)        {           if(DateTime.Now.Year == this.SpecifiedTime.Year &amp;&amp; DateTime.Now.Month == this.SpecifiedTime.Month &amp;&amp; DateTime.Now.Day == this.SpecifiedTime.Day &amp;&amp; DateTime.Now.Hour == this.SpecifiedTime.Hour &amp;&amp; DateTime.Now.Minute == this.SpecifiedTime.Minute &amp;&amp; DateTime.Now.Second == this.SpecifiedTime.Second)               TriggerDel.DynamicInvoke();        }    }}</Code><Critical>1</Critical></File></Files><ReferencedAssemeblies><ReferencedAssemebly>Microsoft.CSharp.dll</ReferencedAssemebly><ReferencedAssemebly>System.dll</ReferencedAssemebly><ReferencedAssemebly>System.Core.dll</ReferencedAssemebly><ReferencedAssemebly>System.Data.dll</ReferencedAssemebly><ReferencedAssemebly>System.Xml.dll</ReferencedAssemebly><ReferencedAssemebly>System.Windows.Forms.dll</ReferencedAssemebly></ReferencedAssemeblies></Source></Trigger><Action><Name>Mbox</Name><GroupName>Test</GroupName><Description>Test</Description><Active>0</Active><NeedsParams>0</NeedsParams><Source><Files><File><Name>Default.cs</Name><Code>using System;using System.Collections.Generic;using System.Text;//Do not edit namespace, class or method namesnamespace Code{    public class Action    {        //This method will be called to execute the action        //These parameters will come from the form for this Action(Optional)        public void Work(object[] Params)        {            System.Windows.Forms.MessageBox.Show("Hello World");        }    }}</Code><Critical>1</Critical></File></Files><ReferencedAssemeblies><ReferencedAssemebly>Microsoft.CSharp.dll</ReferencedAssemebly><ReferencedAssemebly>System.dll</ReferencedAssemebly><ReferencedAssemebly>System.Core.dll</ReferencedAssemebly><ReferencedAssemebly>System.Data.dll</ReferencedAssemebly><ReferencedAssemebly>System.Xml.dll</ReferencedAssemebly><ReferencedAssemebly>System.Windows.Forms.dll</ReferencedAssemebly></ReferencedAssemeblies></Source></Action></Definitions>